/**
 * @file dfk/http/status.hpp
 *
 * @copyright
 * Copyright (c) 2016-2017 Stanislav Ivochkin
 * Licensed under the MIT License (see LICENSE)
 */

#pragma once
#include <dfk.h>

namespace dfk {
namespace http {

enum Status
{
  CONTINUE = DFK_HTTP_CONTINUE,
  SWITCHING_PROTOCOLS = DFK_HTTP_SWITCHING_PROTOCOLS,
  PROCESSING = DFK_HTTP_PROCESSING,

  OK = DFK_HTTP_OK,
  CREATED = DFK_HTTP_CREATED,
  ACCEPTED = DFK_HTTP_ACCEPTED,
  NON_AUTHORITATIVE_INFORMATION = DFK_HTTP_NON_AUTHORITATIVE_INFORMATION,
  NO_CONTENT = DFK_HTTP_NO_CONTENT,
  RESET_CONTENT = DFK_HTTP_RESET_CONTENT,
  PARTIAL_CONTENT = DFK_HTTP_PARTIAL_CONTENT,
  MULTI_STATUS = DFK_HTTP_MULTI_STATUS,
  ALREADY_REPORTED = DFK_HTTP_ALREADY_REPORTED,
  IM_USED = DFK_HTTP_IM_USED,

  MULTIPLE_CHOICES = DFK_HTTP_MULTIPLE_CHOICES,
  MOVED_PERMANENTLY = DFK_HTTP_MOVED_PERMANENTLY,
  FOUND = DFK_HTTP_FOUND,
  SEE_OTHER = DFK_HTTP_SEE_OTHER,
  NOT_MODIFIED = DFK_HTTP_NOT_MODIFIED,
  USE_PROXY = DFK_HTTP_USE_PROXY,
  SWITCH_PROXY = DFK_HTTP_SWITCH_PROXY,
  TEMPORARY_REDIRECT = DFK_HTTP_TEMPORARY_REDIRECT,
  PERMANENT_REDIRECT = DFK_HTTP_PERMANENT_REDIRECT,

  BAD_REQUEST = DFK_HTTP_BAD_REQUEST,
  UNAUTHORIZED = DFK_HTTP_UNAUTHORIZED,
  PAYMENT_REQUIRED = DFK_HTTP_PAYMENT_REQUIRED,
  FORBIDDEN = DFK_HTTP_FORBIDDEN,
  NOT_FOUND = DFK_HTTP_NOT_FOUND,
  METHOD_NOT_ALLOWED = DFK_HTTP_METHOD_NOT_ALLOWED,
  NOT_ACCEPTABLE = DFK_HTTP_NOT_ACCEPTABLE,
  PROXY_AUTHENTICATION_REQUIRED = DFK_HTTP_PROXY_AUTHENTICATION_REQUIRED,
  REQUEST_TIMEOUT = DFK_HTTP_REQUEST_TIMEOUT,
  CONFLICT = DFK_HTTP_CONFLICT,
  GONE = DFK_HTTP_GONE,
  LENGTH_REQUIRED = DFK_HTTP_LENGTH_REQUIRED,
  PRECONDITION_FAILED = DFK_HTTP_PRECONDITION_FAILED,
  PAYLOAD_TOO_LARGE = DFK_HTTP_PAYLOAD_TOO_LARGE,
  URI_TOO_LONG = DFK_HTTP_URI_TOO_LONG,
  UNSUPPORTED_MEDIA_TYPE = DFK_HTTP_UNSUPPORTED_MEDIA_TYPE,
  RANGE_NOT_SATISFIABLE = DFK_HTTP_RANGE_NOT_SATISFIABLE,
  EXPECTATION_FAILED = DFK_HTTP_EXPECTATION_FAILED,
  I_AM_A_TEAPOT = DFK_HTTP_I_AM_A_TEAPOT,
  MISDIRECTED_REQUEST = DFK_HTTP_MISDIRECTED_REQUEST,
  UNPROCESSABLE_ENTITY = DFK_HTTP_UNPROCESSABLE_ENTITY,
  LOCKED = DFK_HTTP_LOCKED,
  FAILED_DEPENDENCY = DFK_HTTP_FAILED_DEPENDENCY,
  UPGRADE_REQUIRED = DFK_HTTP_UPGRADE_REQUIRED,
  PRECONDITION_REQUIRED = DFK_HTTP_PRECONDITION_REQUIRED,
  TOO_MANY_REQUESTS = DFK_HTTP_TOO_MANY_REQUESTS,
  REQUEST_HEADER_FIELDS_TOO_LARGE = DFK_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,
  UNAVAILABLE_FOR_LEGAL_REASONS = DFK_HTTP_UNAVAILABLE_FOR_LEGAL_REASONS,

  INTERNAL_SERVER_ERROR = DFK_HTTP_INTERNAL_SERVER_ERROR,
  NOT_IMPLEMENTED = DFK_HTTP_NOT_IMPLEMENTED,
  BAD_GATEWAY = DFK_HTTP_BAD_GATEWAY,
  SERVICE_UNAVAILABLE = DFK_HTTP_SERVICE_UNAVAILABLE,
  GATEWAY_TIMEOUT = DFK_HTTP_GATEWAY_TIMEOUT,
  HTTP_VERSION_NOT_SUPPORTED = DFK_HTTP_HTTP_VERSION_NOT_SUPPORTED,
  VARIANT_ALSO_NEGOTIATES = DFK_HTTP_VARIANT_ALSO_NEGOTIATES,
  INSUFFICIENT_STORAGE = DFK_HTTP_INSUFFICIENT_STORAGE,
  LOOP_DETECTED = DFK_HTTP_LOOP_DETECTED,
  NOT_EXTENDED = DFK_HTTP_NOT_EXTENDED,
  NETWORK_AUTHENTICATION_REQUIRED = DFK_HTTP_NETWORK_AUTHENTICATION_REQUIRED
};

const char* reasonPhrase(Status status);

}} // namespace dfk::http
