/**
 * @file dfk/config.h
 * Compile-time definitions
 *
 * @copyright
 * Copyright (c) 2015-2017 Stanislav Ivochkin
 * Licensed under the MIT License (see LICENSE)
 */

#pragma once

#define DFK_VERSION "@DFK_VERSION@"
#define DFK_VERSION_MAJOR @DFK_VERSION_MAJOR@
#define DFK_VERSION_MINOR @DFK_VERSION_MINOR@
#define DFK_VERSION_PATCH @DFK_VERSION_PATCH@

/**
 * Defined to 1 if header file "assert.h" is presented in build environment
 */
#cmakedefine01 DFK_HAVE_ASSERT_H
#cmakedefine01 DFK_HAVE_STDDEF_H
#cmakedefine01 DFK_HAVE_STDINT_H
#cmakedefine01 DFK_HAVE_STDLIB_H
#cmakedefine01 DFK_HAVE_STRING_H
#cmakedefine01 DFK_HAVE_STDIO_H
#cmakedefine01 DFK_HAVE_STDARG_H
#cmakedefine01 DFK_HAVE_SIGNAL_H
#cmakedefine01 DFK_HAVE_UNISTD_H
#cmakedefine01 DFK_HAVE_PTHREAD_H
#cmakedefine01 DFK_HAVE_SYS_SOCKET_H
#cmakedefine01 DFK_HAVE_SYS_EPOLL_H
#cmakedefine01 DFK_HAVE_SYS_TYPES_H
#cmakedefine01 DFK_HAVE_SYS_MMAN_H
#cmakedefine01 DFK_HAVE_SYS_UIO_H
#cmakedefine01 DFK_HAVE_NETINET_IN_H
#cmakedefine01 DFK_HAVE_ARPA_INET_H
#cmakedefine01 DFK_HAVE_UCONTEXT_H
#cmakedefine01 DFK_HAVE_SETJMP_H
#cmakedefine01 DFK_HAVE_TIME_H
#cmakedefine01 DFK_HAVE_CTYPE_H
#cmakedefine01 DFK_HAVE_STDATOMIC_H
#cmakedefine01 DFK_HAVE_SIGALTSTACK
#cmakedefine01 DFK_HAVE_NANOSLEEP
#cmakedefine01 DFK_HAVE_FFLUSH
#cmakedefine01 DFK_HAVE_SOCK_NONBLOCK
#cmakedefine01 DFK_HAVE_MPROTECT
#cmakedefine01 DFK_HAVE_MEMMEM

/**
 * Enable binary package maintainer mode.
 *
 * Designed for deb/rpm packages maintainers. Disables -Werror and checks that
 * neither of release-unfriendly options are set.
 *
 * @par Rule of thumb
 * Enable if you are writing specs for debian/rpm or other binary packages to
 * ensure that no development options are enabled by mistake.
 */
#cmakedefine01 DFK_MAINTAINER_MODE

/** Memory page size of target platform */
#define DFK_PAGE_SIZE @DFK_PAGE_SIZE@

/** Expected alignment of the pointer returned by malloc() */
#define DFK_MALLOC_ALIGNMENT @DFK_MALLOC_ALIGNMENT@

/** Default TCP backlog size */
#define DFK_TCP_BACKLOG @DFK_TCP_BACKLOG@

/**
 * Event loop implementation
 *
 * Options are
 * - AUTO (detect best method supported on the current platform)
 * - SELECT (cross-platform, http://man7.org/linux/man-pages/man2/select.2.html)
 * - EPOLL (linux-specific, http://man7.org/linux/man-pages/man7/epoll.7.html)
 */
#define DFK_EVENT_LOOP "@DFK_EVENT_LOOP@"

/**
 * Defined if #DFK_EVENT_LOOP is equal to "EPOLL"
 */
#cmakedefine01 DFK_EVENT_LOOP_EPOLL

/**
 * Defined if #DFK_EVENT_LOOP is equal to "SELECT"
 */
#cmakedefine01 DFK_EVENT_LOOP_SELECT

/**
 * Fibers implementation
 *
 * Options are:
 * - ASM
 */
#define DFK_FIBERS "@DFK_FIBERS@"
#cmakedefine01 CORO_ASM

/** Enable user-provided names for fibers */
#cmakedefine01 DFK_NAMED_FIBERS

/** Maximum size of fiber name, including zero termination byte */
#define DFK_FIBER_NAME_LENGTH @DFK_FIBER_NAME_LENGTH@

/** Stack growth strategy */
#define DFK_STACK "@DFK_STACK@"

/** Default stack size, in bytes */
#define DFK_STACK_SIZE @DFK_STACK_SIZE@

/** Stack alignment, in bytes */
#define DFK_STACK_ALIGNMENT @DFK_STACK_ALIGNMENT@

/** Emit N guard bytes to protect against stack overflow */
#define DFK_STACK_GUARD_SIZE @DFK_STACK_GUARD_SIZE@

/** Emit any log messages */
#cmakedefine01 DFK_LOGGING

/**
 * Emit debug log messages
 *
 * @note If #DFK_LOGGING is disabled, debug messages will **not** be emitted
 * regardless of the #DFK_DEBUG value.
 */
#cmakedefine01 DFK_DEBUG

/** Enable object mocking for unit testing */
#cmakedefine01 DFK_MOCKS

/** Enable multithreading support */
#cmakedefine01 DFK_THREADS

/** Collect gcov coverage statistics */
#cmakedefine01 DFK_COVERAGE

/** In addition to regular mode, run unit tests under valgrind */
#cmakedefine01 DFK_VALGRIND

/** Enable Thread Sanitizer */
#cmakedefine01 DFK_THREAD_SANITIZER

/** Enable Memory Sanitizer */
#cmakedefine01 DFK_MEMORY_SANITIZER

/** Enable link time optimization */
#cmakedefine01 DFK_LTO

/**
 * Maximum number of requests for a single keepalive connection.
 *
 * Negative values mean no limit.
 */
#define DFK_HTTP_KEEPALIVE_REQUESTS @DFK_HTTP_KEEPALIVE_REQUESTS@

/** Size of the buffer allocated for HTTP header parsing. */
#define DFK_HTTP_HEADERS_BUFFER_SIZE @DFK_HTTP_HEADERS_BUFFER_SIZE@

/**
 * Maximum number of buffers of size #DFK_HTTP_HEADERS_BUFFER_SIZE
 * consumed by HTTP request parser.
 */
#define DFK_HTTP_HEADERS_BUFFER_COUNT @DFK_HTTP_HEADERS_BUFFER_COUNT@

/** Limit of the individual HTTP header line - url, "field: value". */
#define DFK_HTTP_HEADER_MAX_SIZE @DFK_HTTP_HEADER_MAX_SIZE@

/** Enable HTTP requests pipelining */
#cmakedefine01 DFK_HTTP_PIPELINING

/** Ignore SIGPIPE when entering dfk loop */
#cmakedefine01 DFK_IGNORE_SIGPIPE

/**
 * Store size of the dfk_list_t.
 *
 * It makes dfk_list_size() function constant-time, but adds overhead to
 * insert/erase operations and increases dfk_list_t size by `sizeof(size_t)`.
 * Dfk internals do not rely on dfk_list_size() function, so if your code also
 * doesn't, option can be set to OFF to slightly improve performance.
 *
 * @par Rule of thumb
 * Set to OFF, if dfk_list_size() function is not used in the application's code
 */
#cmakedefine01 DFK_LIST_CONSTANT_TIME_SIZE

/**
 * Enable XOR'ed pointers optimization for dfk_list_t.
 *
 * It saves 1 pointer per list element though makes list traversal
 * more CPU-consuming.
 *
 * @par Rule of thumb
 * Set to ON if there are troubles with memory consumption due
 * to large amount of data (clients, connections, requests, etc), or
 * restricting execution environment.
 *
 * @see https://en.wikipedia.org/wiki/XOR_linked_list
 */
#cmakedefine01 DFK_LIST_MEMORY_OPTIMIZED

/**
 * Store size of the dfk_avltree_t.
 *
 * It makes dfk_avltree_size() function constant-time, but adds slight overhead
 * to insert/erase operations and increases dfk_avltree_t size by
 * `sizeof(size_t)`. Dfk internals do not rely on dfk_avltree_size() function,
 * so if your code also doesn't, option can be set to OFF to slightly improve
 * performance.
 *
 * @par Rule of thumb
 * Set to OFF, if dfk_avltree_size() function is not used in the application's
 * code.
 */
#cmakedefine01 DFK_AVLTREE_CONSTANT_TIME_SIZE

/**
 * Enable heuristics for dfk_urlencode_hint(), dfk_urldecode_hint() functions
 *
 * It makes dfk_urlencode_hint(), dfk_urldecode_hint() functions constant-time,
 * so they do not peek into the buffer. The buffer size hint is determined as
 * the maximum that could possibly be needed to decode/encode:
 * - dfk_urlencode_hint() returns 3 * size of the input buffer
 * - dfk_urldecode_hint() returns the size of the input buffer
 *
 * @par Rule of thumb
 * Set to OFF to reduce memory consumption at the expense of performance.
 * Setting to OFF is relevant for apps that url-decode/url-encode large
 * volumes of data and run in memory-restricted environment.
 */
#cmakedefine01 DFK_URLENCODING_HINT_HEURISRICS

/** Size of arena's segment, in bytes */
#define DFK_ARENA_SEGMENT_SIZE @DFK_ARENA_SEGMENT_SIZE@

/** Size of sponge data structure initial size, in bytes. */
#define DFK_SPONGE_INITIAL_SIZE @DFK_SPONGE_INITIAL_SIZE@

/** Enable fileserver middleware */
#cmakedefine01 DFK_FILESERVER

/** Size of disk IO buffer for each connection */
#define DFK_FILESERVER_BUFFER_SIZE @DFK_FILESERVER_BUFFER_SIZE@

#if DFK_THREADS
#if DFK_HAVE_STDATOMIC_H
#define dfk_atomic_size_t atomic_size_t
#else
#error
#endif
#else
#define dfk_atomic_size_t size_t
#endif

